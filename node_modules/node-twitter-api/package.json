{
  "name": "node-twitter-api",
  "version": "1.2.3",
  "description": "Simple module for using Twitter's API in node.js",
  "keywords": [
    "twitter",
    "oauth",
    "rest",
    "streaming"
  ],
  "homepage": "https://github.com/reneraab/node-twitter-api",
  "author": {
    "name": "RenÃ© Raab"
  },
  "licenses": {
    "type": "MIT",
    "url": "https://raw.github.com/reneraab/node-twitter-api/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/reneraab/node-twitter-api.git"
  },
  "dependencies": {
    "oauth": ">=0.8.4",
    "request": "*"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./twitter",
  "readme": "# node-twitter #\n\n\nSimple module for using Twitter's API in node.js\n\n\n## Installation ##\n\n\n`npm install node-twitter-api`\n\n## Usage ##\n\n### Step 1: Initialization ###\n```javascript\nvar twitterAPI = require('node-twitter-api');\nvar twitter = new twitterAPI({\n\tconsumerKey: 'your consumer Key',\n\tconsumerSecret: 'your consumer secret',\n\tcallback: 'http://yoururl.tld/something'\n});\n```\n### Step 2: Getting a request token ###\n```javascript\ntwitter.getRequestToken(function(error, requestToken, requestTokenSecret, results){\n\tif (error) {\n\t\tconsole.log(\"Error getting OAuth request token : \" + error);\n\t} else {\n\t\t//store token and tokenSecret somewhere, you'll need them later; redirect user\n\t}\n});\n```\nIf no error has occured, you now have a `requestToken` and a `requestTokenSecret`. You should store them somewhere (e.g. in a session, if you are using express), because you will need them later to get the current user's access token, which is used for authentification.\n\n### Step 3: Getting an Access Token ###\nRedirect the user to `https://twitter.com/oauth/authenticate?oauth_token=[requestToken]`.\nIf he allows your app to access his data, Twitter will redirect him to your callback-URL (defined in Step 1) containing the get-parameters: `oauth_token` and `oauth_verifier`. You can use `oauth_token` (which is the `requestToken` in Step 2) to find the associated `requestTokenSecret`. You will need `requestToken`, `requestTokenSecret` and `oauth_verifier` to get an Access Token.\n```javascript\ntwitter.getAccessToken(requestToken, requestTokenSecret, oauth_verifier, function(error, accessToken, accessTokenSecret, results) {\n\tif (error) {\n\t\tconsole.log(error);\n\t} else {\n\t\t//store accessToken and accessTokenSecret somewhere (associated to the user)\n\t\t//Step 4: Verify Credentials belongs here\n\t}\n});\n```\nIf no error occured, you now have an `accessToken` and an `accessTokenSecret`. You need them to authenticate later API-calls.\n\n### Step 4: (Optional) Verify Credentials ###\n```javascript\ntwitter.verifyCredentials(accessToken, accessTokenSecret, function(error, data, response) {\n\tif (error) {\n\t\t//something was wrong with either accessToken or accessTokenSecret\n\t\t//start over with Step 1\n\t} else {\n\t\t//accessToken and accessTokenSecret can now be used to make api-calls (not yet implemented)\n\t\t//data contains the user-data described in the official Twitter-API-docs\n\t\t//you could e.g. display his screen_name\n\t\tconsole.log(data[\"screen_name\"]);\n\t}\n});\n```\n\n## Methods ##\n(Allmost) all function names replicate the endpoints of the Twitter API 1.1.\nIf you want to post a status e. g. - which is done by posting data to statuses/update - you can just do the following:\n```javascript\ntwitter.statuses(\"update\", {\n\t\tstatus: \"Hello world!\"\n\t},\n\taccessToken,\n\taccessTokenSecret,\n\tfunction(error, data, response) {\n\t\tif (error) {\n\t\t\t// something went wrong\n\t\t} else {\n\t\t\t// data contains the data sent by twitter\n\t\t}\n\t}\n);\n```\n\nMost of the functions use the scheme:\n`twitter.[namespace]([type], [params], [accessToken], [accessTokenSecret], [callback]);`\n* _namespace_ is the word before the slash (e.g. \"statuses\", \"search\", \"direct_messages\" etc.)\n* _type_ is the word after the slash (e.g. \"create\", \"update\", \"show\" etc.)\n* _params_ is an object containing the parameters you want to give to twitter (refer to the Twitter API Documentation for more information)\n* _accessToken_ and _accessTokenSecret_ are the token and secret of the authenticated user\n* _callback_ is a function with the parameters _error_ (either null or an error object), _data_ (data object) and _response_ (unprocessed response from Twitter)\n\nFor Timelines you can also use the function _getTimeline_ instead of _statuses_ and use shorter types (\"user\" instead of \"user_timeline\").\nFor Streams you must use _getStream_ which has two instead of just one callback: a dataCallback and an endCallback. (c.f. data and end events of node's http response)\n\n## Use of update_with_media ##\n(works similar for update_profile_image)\nTo send media alongside a tweet you just call the method as specified before. Please note, that you have to specify the parameters slightly different than proposed by the Twitter API documentation:\n```javascript\n{\n\tmedia: [\n\t\t\"path_to_file1\",\n\t\t\"path_to_file2\",\n\t\tstream\n\t],\n\tstatus: \"Hello World\"\n},\n```\nInstead of specifing \"media[]\", you use a real array. The given paths will then be read and posted to the Twitter API. You can also use a Readable Stream (http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options) instead of a Path.\nPlease note that Twitter only allows one image at the moment (the last one specified will be used).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/reneraab/node-twitter-api/issues"
  },
  "_id": "node-twitter-api@1.2.3",
  "_from": "node-twitter-api@"
}
